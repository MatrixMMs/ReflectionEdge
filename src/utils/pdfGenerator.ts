import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

// A4 page dimensions in mm
const PAGE_WIDTH = 210;
const PAGE_HEIGHT = 297;
const MARGIN = 15;
const CONTENT_WIDTH = PAGE_WIDTH - (MARGIN * 2);

export interface AnalyticsData {
  edgeDiscovery?: any;
  patternAnalysis?: any;
  kellyCriterion?: any;
}

/**
 * Generates a PDF report from HTML elements.
 * @param elementsToPrint - An array of objects, each with an elementId and a title.
 * @param summaryStats - Key-value pairs of summary statistics to print.
 * @param reportTitle - The main title for the report.
 * @param dateRange - The date range for the report.
 * @param analytics - Optional analytical data to include in the report.
 */
export const generatePdfReport = async (
  elementsToPrint: { elementId: string; title: string }[],
  summaryStats: { [key: string]: string | number },
  reportTitle: string,
  dateRange: { start: string, end: string },
  analytics?: AnalyticsData
) => {
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  // --- Header ---
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text(reportTitle, MARGIN, MARGIN + 5);

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Report for period: ${dateRange.start} to ${dateRange.end}`, MARGIN, MARGIN + 12);
  doc.setDrawColor(180, 180, 180);
  doc.line(MARGIN, MARGIN + 15, PAGE_WIDTH - MARGIN, MARGIN + 15);

  let yPosition = MARGIN + 25;

  // --- Summary Stats ---
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Key Performance Indicators', MARGIN, yPosition);
  yPosition += 8;

  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  let xPosition = MARGIN;
  const colWidth = CONTENT_WIDTH / 2;
  let itemCount = 0;
  
  for (const [key, value] of Object.entries(summaryStats)) {
    if (itemCount > 0 && itemCount % 2 === 0) {
      xPosition = MARGIN;
      yPosition += 7;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.text(`${key}:`, xPosition, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(String(value), xPosition + 35, yPosition);

    xPosition += colWidth;
    itemCount++;
  }

  yPosition += 15;

  // --- Analytics Section ---
  if (analytics) {
    yPosition = addAnalyticsSection(doc, analytics, yPosition);
  }

  // --- Charts and Tables ---
  for (const { elementId, title } of elementsToPrint) {
    const element = document.getElementById(elementId);
    if (!element) {
      console.error(`Element with ID ${elementId} not found.`);
      continue;
    }

    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');

    if (yPosition + 40 > PAGE_HEIGHT - MARGIN) {
        doc.addPage();
        yPosition = MARGIN;
    }
    
    doc.text(title, MARGIN, yPosition);
    yPosition += 8;
    
    const canvas = await html2canvas(element, {
      backgroundColor: '#374151', // bg-gray-700
      scale: 2, // Increase scale for better resolution
    });
    
    const imgData = canvas.toDataURL('image/png');
    const imgWidth = canvas.width;
    const imgHeight = canvas.height;
    
    const aspectRatio = imgWidth / imgHeight;
    let finalWidth = CONTENT_WIDTH;
    let finalHeight = finalWidth / aspectRatio;

    // Check if image fits on the current page, if not add a new page
    if (yPosition + finalHeight > PAGE_HEIGHT - MARGIN) {
      doc.addPage();
      yPosition = MARGIN;
    }
    
    doc.addImage(imgData, 'PNG', MARGIN, yPosition, finalWidth, finalHeight);
    yPosition += finalHeight + 10; // Add padding after image
  }

  // --- Footer ---
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setTextColor(150);
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Reflection Edge`,
      PAGE_WIDTH / 2,
      PAGE_HEIGHT - 10,
      { align: 'center' }
    );
  }

  // --- Save the PDF ---
  doc.save(`Reflection-Edge-Report-${new Date().toISOString().slice(0,10)}.pdf`);
};

const addAnalyticsSection = (doc: jsPDF, analytics: AnalyticsData, yPosition: number): number => {
  // Check if we need a new page
  if (yPosition + 60 > PAGE_HEIGHT - MARGIN) {
    doc.addPage();
    yPosition = MARGIN;
  }

  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Analytical Insights', MARGIN, yPosition);
  yPosition += 8;

  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');

  // Edge Discovery
  if (analytics.edgeDiscovery) {
    const edge = analytics.edgeDiscovery;
    doc.setFont('helvetica', 'bold');
    doc.text('Edge Discovery:', MARGIN, yPosition);
    yPosition += 5;
    
    doc.setFont('helvetica', 'normal');
    doc.text(`Overall Edge Score: ${edge.overallEdge?.toFixed(2) || 'N/A'}`, MARGIN + 5, yPosition);
    yPosition += 4;
    
    if (edge.topEdges && edge.topEdges.length > 0) {
      doc.text('Top Edges:', MARGIN + 5, yPosition);
      yPosition += 4;
      edge.topEdges.slice(0, 3).forEach((topEdge: any, index: number) => {
        const text = `${index + 1}. ${topEdge.description} (Confidence: ${(topEdge.confidence * 100).toFixed(1)}%)`;
        if (yPosition + 4 > PAGE_HEIGHT - MARGIN) {
          doc.addPage();
          yPosition = MARGIN;
        }
        doc.text(text, MARGIN + 10, yPosition);
        yPosition += 4;
      });
    }
    yPosition += 3;
  }

  // Kelly Criterion
  if (analytics.kellyCriterion) {
    const kelly = analytics.kellyCriterion;
    if (yPosition + 20 > PAGE_HEIGHT - MARGIN) {
      doc.addPage();
      yPosition = MARGIN;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.text('Kelly Criterion Analysis:', MARGIN, yPosition);
    yPosition += 5;
    
    doc.setFont('helvetica', 'normal');
    if (kelly.fullKelly) {
      doc.text(`Full Kelly: ${kelly.fullKelly.recommendedPositionSize?.toFixed(1) || '0'}%`, MARGIN + 5, yPosition);
      yPosition += 4;
      doc.text(`Half Kelly: ${kelly.halfKelly.recommendedPositionSize?.toFixed(1) || '0'}%`, MARGIN + 5, yPosition);
      yPosition += 4;
      doc.text(`Quarter Kelly: ${kelly.quarterKelly.recommendedPositionSize?.toFixed(1) || '0'}%`, MARGIN + 5, yPosition);
      yPosition += 4;
      doc.text(`Conservative: ${kelly.conservativeKelly.recommendedPositionSize?.toFixed(1) || '0'}%`, MARGIN + 5, yPosition);
      yPosition += 6;
    }
  }

  // Pattern Analysis
  if (analytics.patternAnalysis) {
    const patterns = analytics.patternAnalysis;
    if (yPosition + 15 > PAGE_HEIGHT - MARGIN) {
      doc.addPage();
      yPosition = MARGIN;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.text('Time Pattern Analysis:', MARGIN, yPosition);
    yPosition += 5;
    
    doc.setFont('helvetica', 'normal');
    if (patterns.bestPerformingHours && patterns.bestPerformingHours.length > 0) {
      const bestHour = patterns.bestPerformingHours[0];
      doc.text(`Best Hour: ${bestHour.value}:00 (Win Rate: ${bestHour.winRate?.toFixed(1) || '0'}%)`, MARGIN + 5, yPosition);
      yPosition += 4;
    }
    
    if (patterns.bestPerformingDays && patterns.bestPerformingDays.length > 0) {
      const bestDay = patterns.bestPerformingDays[0];
      doc.text(`Best Day: ${bestDay.value} (Win Rate: ${bestDay.winRate?.toFixed(1) || '0'}%)`, MARGIN + 5, yPosition);
      yPosition += 4;
    }
  }

  return yPosition + 10; // Add some padding after analytics section
}; 